#pragma once
#include <cstdint>
#include "../../include/common.hpp"   // Include DecodedInstruction

class Hart;  // Forward declaration

// NOTE: this file is autogenerated do not edit it manually
// Generator: rv32i_executer_gen.rb
// RV32I Executer class
class RV32IExecuter {
public:
    static void execute(const DecodedInstruction& instr, Hart* hart);
    
private:
    static void execute_add(const DecodedInstruction& instr, Hart* hart);
    static void execute_sub(const DecodedInstruction& instr, Hart* hart);
    static void execute_sll(const DecodedInstruction& instr, Hart* hart);
    static void execute_slt(const DecodedInstruction& instr, Hart* hart);
    static void execute_sltu(const DecodedInstruction& instr, Hart* hart);
    static void execute_xor(const DecodedInstruction& instr, Hart* hart);
    static void execute_srl(const DecodedInstruction& instr, Hart* hart);
    static void execute_sra(const DecodedInstruction& instr, Hart* hart);
    static void execute_or(const DecodedInstruction& instr, Hart* hart);
    static void execute_and(const DecodedInstruction& instr, Hart* hart);
    static void execute_addi(const DecodedInstruction& instr, Hart* hart);
    static void execute_slti(const DecodedInstruction& instr, Hart* hart);
    static void execute_sltiu(const DecodedInstruction& instr, Hart* hart);
    static void execute_xori(const DecodedInstruction& instr, Hart* hart);
    static void execute_ori(const DecodedInstruction& instr, Hart* hart);
    static void execute_andi(const DecodedInstruction& instr, Hart* hart);
    static void execute_slli(const DecodedInstruction& instr, Hart* hart);
    static void execute_srli(const DecodedInstruction& instr, Hart* hart);
    static void execute_srai(const DecodedInstruction& instr, Hart* hart);
    static void execute_lb(const DecodedInstruction& instr, Hart* hart);
    static void execute_lh(const DecodedInstruction& instr, Hart* hart);
    static void execute_lw(const DecodedInstruction& instr, Hart* hart);
    static void execute_lbu(const DecodedInstruction& instr, Hart* hart);
    static void execute_lhu(const DecodedInstruction& instr, Hart* hart);
    static void execute_jalr(const DecodedInstruction& instr, Hart* hart);
    static void execute_sb(const DecodedInstruction& instr, Hart* hart);
    static void execute_sh(const DecodedInstruction& instr, Hart* hart);
    static void execute_sw(const DecodedInstruction& instr, Hart* hart);
    static void execute_beq(const DecodedInstruction& instr, Hart* hart);
    static void execute_bne(const DecodedInstruction& instr, Hart* hart);
    static void execute_blt(const DecodedInstruction& instr, Hart* hart);
    static void execute_bge(const DecodedInstruction& instr, Hart* hart);
    static void execute_bltu(const DecodedInstruction& instr, Hart* hart);
    static void execute_bgeu(const DecodedInstruction& instr, Hart* hart);
    static void execute_lui(const DecodedInstruction& instr, Hart* hart);
    static void execute_auipc(const DecodedInstruction& instr, Hart* hart);
    static void execute_jal(const DecodedInstruction& instr, Hart* hart);
    static void execute_ecall(const DecodedInstruction& instr, Hart* hart);
};
